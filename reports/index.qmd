---
title: A DNA barcode reference of Asian ferns with expert-identified voucher specimens and DNA samples
format: docx
df-print: paged
execute:
  echo: false
  warning: false
  output: true
bibliography: references.yaml
---

```{r}
#| label: load
targets::tar_load(
  c(
    references, # re-knit if references change
    barcode_dist,
    monophyly_res,
    barcode_gap_res_raw,
    blast_test_res_raw,
    barcode_tree,
    alignment_files,
    sp_complex,
    hybrid_taxa,
    seqs_raw,
    ppgi),
  store = here::here("_targets/"))

source(here::here("R/packages.R"))
source(here::here("R/functions.R"))

library(glue)
library(janitor)
library(ggtext)
library(ggtree)
```

```{r}
#| label: dot-plot

custom_labels <- setNames(
  c("(a) Interspecific", "(b) Intraspecific"), c("inter", "intra"))

plot <- barcode_gap_res_raw %>%
  filter(marker %in% c("rbcl", "trnlf"), taxon_sampling == "all") %>%
  select(marker, species, inter = min_inter_dist, intra = max_intra_dist) %>%
  pivot_longer(names_to = "comp_type", -c(marker, species)) %>%
  pivot_wider(names_from = marker, values_from = value) %>%
  # filter(!if_any(everything(), is.na))
  ggplot(aes(x = rbcl, y = trnlf)) +
  geom_abline(
    slope = 1, intercept = 0, linetype = "dashed", color = "red",
    linewidth = 0.25) +
  geom_point(alpha = 0.5, size = 0.5) +
  # coord_fixed() +
  labs(
    x = "rbcL",
    y = "trnL-F"
  ) +
  facet_wrap(
    vars(comp_type), labeller = labeller(comp_type = custom_labels),
    scales = "free") +
  theme_bw() +
  theme(
     axis.title.x = element_text(face = "italic"),
     axis.title.y = element_text(face = "italic")
  )

ggsave(
  plot = plot,
  file = here::here("results/reports/figure_2.pdf"),
  width = 8, height = 4, units = "in")
```


```{r}
#| label: tree-plot

# extract tree from list
marker <- str_extract(alignment_files, "rbcl_trnlf|rbcl_short|trnlf|rbcl")
taxon_sampling <- str_extract(alignment_files, "all|no_hybrid")

tree_selection <- which(marker == "rbcl_trnlf" & taxon_sampling == "all")
invisible(assertthat::assert_that(assertthat::is.number(tree_selection)))

tree_to_plot <- barcode_tree[[tree_selection]]

# Root tree
outgroup <- tree_to_plot$tip.label[
  str_detect(tree_to_plot$tip.label, "Zygnema")]
invisible(assertthat::assert_that(assertthat::is.string(outgroup)))

tree_to_plot <-
  phytools::reroot(
      tree = tree_to_plot,
      node.number = which(tree_to_plot$tip.label == outgroup)
    )

# Make data frame matching tree tips to species names
tree_tip_species <-
  tibble(tip = tree_to_plot$tip.label) %>%
  mutate(species = voucher_to_species(tip, "_"))

# Compile taxonomy data for labeling clades
taxonomy_summary <-
  seqs_raw %>%
  distinct(tip = voucher, family) %>%
  left_join(
    unique(select(ppgi, family, suborder, order)),
    by = "family",
    relationship = "many-to-one"
  ) %>%
  mutate(major_clade = case_when(
    family == "outgroup" ~ "outgroup",
    order == "Polypodiales" ~ suborder,
    .default = order
  )) %>%
  select(tip, major_clade) %>%
  assert(not_na, everything()) %>%
  inner_join(select(tree_tip_species, tip), by = "tip")

clade_cols <- tribble(
  ~major_clade, ~color_name,
  "Polypodiineae", "amethyst",
  "Aspleniineae", "blue",
  "Pteridineae", "damson",
  "Dennstaedtiineae", "caramel",
  "Lindsaeineae", "green",
  "Cyatheales", "mallow",
  "Salviniales", "navy",
  "Schizaeales", "pink",
  "Hymenophyllales", "red",
  "Gleicheniales", "sky",
  "Osmundales", "turquoise",
  "Ophioglossales", "violet",
  "Marattiales", "uranium"
) %>%
  inner_join(
    tibble(
      color_name = names(Polychrome::green.armytage.colors()),
      color = Polychrome::green.armytage.colors()
    ),
    by = "color_name",
    relationship = "one-to-one"
  ) %>%
  mutate(plot_order = seq_len(nrow(.)))

clade_tibble <- MonoPhy::AssessMonophyly(
  tree_to_plot,
  as.data.frame(taxonomy_summary)) %>%
  MonoPhy::GetResultMonophyly() %>%
    magrittr::extract2(1) %>%
    rownames_to_column("major_clade") %>%
    as_tibble() %>%
    janitor::clean_names() %>%
  mutate(mrca = parse_number(mrca)) %>%
  filter(major_clade != "outgroup", monophyly != "Monotypic") %>%
  verify(all(monophyly == "Yes")) %>%
  mutate(
    major_clade,
    major_clade_letter = str_sub(major_clade, 1, 2),
    mrca, .keep = "used") %>%
  assert(is_uniq, major_clade_letter) %>%
  left_join(clade_cols, relationship = "one-to-one", by = "major_clade") %>%
  mutate(major_clade = fct_reorder(major_clade, plot_order)) %>%
  mutate(major_clade_letter = fct_reorder(major_clade_letter, plot_order)) %>%
  arrange(major_clade)

# Compile hybrid taxa data
hybrid_taxa_data <-
  tree_tip_species %>%
  mutate(
    hybrid_taxon = case_when(
      species %in% sp_complex$species ~ "Hybrid",
      tip %in% hybrid_taxa$voucher ~ "Hybrid",
      .default = "not_hybrid"
    )
  ) %>%
  select(tip, hybrid_taxon) %>%
  assert(not_na, everything())

# Compile monophyly test data
monophy_test_species_summary <-
  monophyly_res %>%
  filter(monophyly != "Monotypic") %>%
  filter(taxon_sampling == "all", marker == "rbcl_trnlf") %>%
  group_by(species) %>%
  summarize(
    monophy_test = any(monophyly %in% "No") %>%
      if_else("Fail", "Pass")
  )

monophy_tree_data <-
  tree_tip_species %>%
  left_join(
    monophy_test_species_summary, by = "species", relationship = "many-to-one") %>%
  mutate(monophy_test = replace_na(monophy_test, "NA")) %>%
  select(tip, monophy_test)

# Compile gap test data
gap_test_species_summary <-
  barcode_gap_res_raw %>%
  filter(taxon_sampling == "all", marker == "rbcl_trnlf") %>%
  group_by(species) %>%
  summarize(
    gap_test = any(fail) %>%
      if_else("Fail", "Pass")
  ) %>%
  mutate(species = str_replace_all(species, " ", "_"))

gap_tree_data <-
  tree_tip_species %>%
  left_join(
    gap_test_species_summary, by = "species", relationship = "many-to-one") %>%
  mutate(gap_test = replace_na(gap_test, "NA")) %>%
  select(tip, gap_test)

# Compile blast test data
blast_test_species_summary <-
  blast_test_res_raw %>%
  filter(taxon_sampling == "all", marker == "rbcl_trnlf") %>%
  rename(species = q_species) %>%
  group_by(species) %>%
  summarize(
    blast_test = any(fail) %>%
      if_else("Fail", "Pass")
  ) %>% 
  mutate(species = str_replace_all(species, " ", "_"))

blast_tree_data <-
  tree_tip_species %>%
  left_join(
    blast_test_species_summary, by = "species", relationship = "many-to-one") %>%
  mutate(blast_test = replace_na(blast_test, "NA")) %>%
  select(tip, blast_test)

# Join datasets for plotting
tree_plot_data <-
  hybrid_taxa_data %>%
  left_join(gap_tree_data, by = "tip", relationship = "one-to-one") %>%
  left_join(monophy_tree_data, by = "tip", relationship = "one-to-one") %>%
  left_join(blast_tree_data, by = "tip", relationship = "one-to-one") %>%
  rename(
    hybrid = hybrid_taxon,
    gap = gap_test,
    tree = monophy_test,
    BLAST = blast_test) %>%
  column_to_rownames("tip")

# Make plot

circ_tree <- ggtree(tree_to_plot, layout = "fan", open.angle = 10, size = 0.3)

oi_cols <- palette.colors(n = 9, palette = "Okabe-Ito")

heatmap_cols <- c(
  Pass = oi_cols[["skyblue"]],
  Fail = oi_cols[["vermillion"]],
  Hybrid = oi_cols[["orange"]],
  not_hybrid = "white",
  `NA` = "grey80"
)

heatmap_col_labels <- c(
  "Pass", "Fail", "Hybrid", NULL, "NA"
)

clade_cols <- clade_tibble %>%
  pull(color) %>%
  set_names(clade_tibble$major_clade)

# Get outgroup taxa for plotting outgroup line
og_taxa_sorted <- ggtree::fortify(tree_to_plot) %>%
  left_join(taxonomy_summary, by = c(label = "tip")) %>%
  filter(major_clade == "outgroup") %>%
  arrange(x) %>%
  pull(label)

plot <- gheatmap(
    p = circ_tree, 
    data = tree_plot_data,
    colnames_angle = 90,
    colnames_offset_y = 0.25,
    width = 0.3,
    hjust = 1) +
  scale_fill_manual(
    values = heatmap_cols,
    breaks = c("Pass", "Fail", "Hybrid", "NA")) +
  geom_cladelab(
    data = clade_tibble,
    barsize = 1,
    textcolour = "black",
    align = TRUE,
    #offset.text = -0.1,
    offset = 0.8,
    offset.text = 0.2,
    mapping = aes(
      node = mrca,
      label = major_clade_letter,
      color = major_clade)
  ) +
  geom_strip(
    first(og_taxa_sorted),
    last(og_taxa_sorted),
    label = "Outgroup",
    offset = 0.8,
    offset.text = 0.2,
    color = "black") +
  scale_color_manual(values = clade_cols) +
  theme(
    legend.title = element_blank(),
    legend.position = "right")

ggsave(
  plot = plot,
  file = here::here("results/reports/figure_3.pdf"),
  width = 10.1, height = 10.1, units = "in")
```

```{r}
#| label: barcode-table

# Number of species with multiple sequences per species
n_species_mult_specimen <- 
  barcode_gap_res_raw %>%
  pull(species) %>%
  n_distinct()

# Barcode test results
pretty_names <- tribble(
  ~dataset, ~dataset_pretty, ~order,
  "all rbcl_short", "*rbcL* short, all taxa", 1,
  "all rbcl", "*rbcL*, all taxa", 2,
  "all trnlf", "*trnL-F*, all taxa", 3,
  "all rbcl_trnlf", "*rbcL* + *trnL-F*, all taxa", 4,
  "no_hybrid rbcl_short", "*rbcL* short, no hybrids", 5,
  "no_hybrid rbcl", "*rbcL*, no hybrids", 6,
  "no_hybrid trnlf", "*trnL-F*, no hybrids", 7,
  "no_hybrid rbcl_trnlf", "*rbcL* + *trnL-F*, no hybrids", 8
)

gap_table <-
  barcode_gap_res_raw %>%
  mutate(result = if_else(fail, "Fail", "Pass")) %>%
  mutate(dataset = paste(taxon_sampling, marker)) %>%
  tabyl(dataset, result) %>%
  adorn_totals("col") %>%
  mutate(
    percent = scales::percent(Pass / Total, 0.01),
    gap = glue("{Pass}/{Total} ({percent})"),
    test = "gap"
  )

monophyly_table <-
  monophyly_res %>%
  filter(monophyly != "Monotypic") %>%
  mutate(dataset = paste(taxon_sampling, marker)) %>%
  tabyl(dataset, monophyly) %>%
  rename(Pass = Yes, Fail = No) %>%
  adorn_totals("col") %>%
  mutate(
    percent = scales::percent(Pass / Total, 0.01),
    monophyly = glue("{Pass}/{Total} ({percent})"),
    test = "monophyly"
  )

blast_table <-
  blast_test_res_raw %>%
  mutate(result = if_else(fail, "Fail", "Pass")) %>%
  mutate(dataset = paste(taxon_sampling, marker)) %>%
  tabyl(dataset, result) %>%
  adorn_totals("col") %>%
  mutate(
    percent = scales::percent(Pass / Total, 0.01),
    blast = glue("{Pass}/{Total} ({percent})"),
    test = "blast"
  )

barcoding_res_table <-
  select(blast_table, dataset, blast) %>%
  left_join(
    select(monophyly_table, dataset, monophyly),
    by = "dataset"
  ) %>%
  left_join(
    select(gap_table, dataset, gap),
    by = "dataset"
  ) %>%
  left_join(pretty_names, by = "dataset") %>%
  mutate(dataset = dataset_pretty) %>%
  arrange(order) %>%
  select(Dataset = dataset, Gap = gap, BLAST = blast, Tree = monophyly)

barcode_res_long <-
  bind_rows(monophyly_table, blast_table, gap_table) %>%
  select(-monophyly, -blast, -gap) %>%
  clean_names() %>%
  left_join(pretty_names, by = "dataset") %>%
  mutate(dataset = dataset_pretty) %>%
  select(-dataset_pretty) %>%
  mutate(
    test = str_replace_all(test, "blast", "BLAST"),
    dataset = str_replace_all(dataset, "\\(short\\)", "short"))

get_blast_res <- function(glue_text, ...) {
  barcode_res_long %>%
  filter(...) %>%
  slice(1) %>%
  mutate(text = glue(glue_text)) %>%
  pull(text) %>%
  as.character()
}
```

## Data Validation

We used three methods to evaluate the utility of the DNA barcodes for species identification: barcode gap test, tree (monophyly) test, and BLAST test.
Any specimens not identified to species were excluded from analysis.
For the gap test, we first aligned all specimens within each family using MAFFT [@Katoh2002].
Classification followed PPG I, with updates for some recently published or revised genera; families with fewer than two samples excluded from the gap test. 
We then calculated pairwise distances between all specimens within each family using Kimura’s two-parameter algorithm [K2P\; @Kimura1979].
Any species with one or more maximum intraspecific distances that exceeded the minimum interspecific distance was considered a failure.
For the tree test, we merged the family-level *trnL-F* alignments into a single alignment using the MAFFT `--merge` argument, and aligned *rbcL* with the same outgroups as those used in @Nitta2022b.
We then inferred a maximum-likelihood phylogeny using IQTREE [@Nguyen2015] and assessed the monophyly of each species using the 'MonoPhy' R package [@Schwery2016].
Any species that was not monophyletic was counted as a failure.
For the BLAST test, we first created a BLAST database for each marker.
Next, we queried each sequence in turn against the database using the BLAST-n algorithm [@Altschul1997; @Camacho2009].
We calculated the mean intraspecific percent identity (pident) from the BLAST results of taxa not belonging to species complexes or hybrids and used this as the species level cutoff value.
Finally, we categorized any BLAST hit where the query sequenced matched a sequence from a different species above the cutoff value for at least 95% of the query sequence length as a failure.
Note that the gap test and tree test can only be used for species that include multiple specimens in our sampling.

Our initial results suggested that taxa belonging to species complexes and/or hybrids had increased failure rates, so we repeated all tests on datasets that excluded species complexes and hybrids.
To verify the utility of next-gen DNA sequencing platforms for barcoding ferns, we also analyzed a dataset of *rbcL* sequences that were trimmed to the 950 bp range typically recovered by the MiSeq platform, which is considerably shorter than the full-length *rbcL* sequences obtained by Sanger sequencing (ca. 1,352 bp).
We also conducted the tests on combined full-length *rbcL* + *trnL-F* sequences, resulting in a total of eight datasets: four markers (*rbcL*, *rbcL* short, *trnL-F*, *rbcL* + *trnL-F*) across two taxon sampling schemes (all taxa, or exluding hybrids and species complexes).

## Technical Validation

Rates of successful species identification ranged from `r get_blast_res("{percent} ({dataset}, {test} test)", percent == min(percent))` to `r get_blast_res("{percent} ({dataset}, {test} test)", percent == max(percent))` (Table 1), in general agreement with reported success rates for *rbcL* (ca. 80%) of ferns from Japan [@Ebihara2010] and Costa Rica [@Nitta2022b].
The gap test failed to find a barcode gap in many species, in agreement with a study on ferns from Oaxaca, Mexico [@Trujillo-Argueta2021].
One study from Europe reported a consistent barcode gap across species, but this is likely due to their much smaller sample size [24 species with multiple specimens vs. `r n_species_mult_specimen` in the current study\; @DeGroot2011a].
*trnL-F* had higher successful species identification rates than *rbcL* in the BLAST test, but not the gap test (Table 1).
*trnL-F* has greater interspecific and intraspecific variation relative to *rbcl* because the former is a non-coding spacer region, whereas the latter is a protein-coding gene (Fig. 2).
*trnL-F* has been previously shown in studies including smaller sampling of ferns to have higher species identification rates than *rbcL* [@Li2011; @Chen2013a].
However, *rbcL* is useful as a phylogenetic marker at deeper divergence levels due to its slower rate of evolution, and is the most-frequently sequenced plastid region in ferns [@Nitta2022b] as well as a core DNA barcoding marker in land plants [@Group2008].
We therefore recommend both regions be used for fern DNA barcoding projects, which can serve to both identify species and expand the phylogenetic sampling of the fern tree of life; futhermore, combining the two regions produced the best results in the BLAST and tree tests (but not the gap test).
Analyses using the shorter region of *rbcL* obtained by the MiSeq platform did not show a substantial decrease in species identification rates in the gap or tree tests, and only a ca. 4% decrease in the BLAST test (Table 1).
Therefore, massively parallel sequencing of *rbcL* is a promising approach for building barcode libraries.

A marked improvement in species identification rates was observed in datasets with hybrid taxa and species complexes removed, similar to a study in Japan [Table 1\; @Ebihara2010].
Furthermore, many species complexes and hybrid taxa could not be successfully identified regardless of the test employed (Fig. 3).
The difficulty of molecularly identifying such taxa is due to the fact that the plastid genome is non-recombining and maternally inherited in ferns [hence, hybrid taxa share identical plastid sequences with their mother\; @Gastony1992; @Vogel1998; @Kuo2018a].
As ferns have a generally high frequency of hybridization [@Barrington1989], this problem is expected to occur in any DNA barcoding study of ferns with a sufficiently dense sampling that relies on plastid markers.
While our study demonstrates that plastid markers can be used to successfully identify species in the majority of cases, there will be some taxa that require additional investigation using, e.g., nuclear markers and/or genome-wide approaches.

## Code Availability

The pipeline for technical validation was designed using the 'targets' R package [@Landau2021] and is available from <https://github.com/joelnitta/bifa_barcodes>. A Docker image to run the code is available from <https://hub.docker.com/r/joelnitta/bifa_barcodes>.

## Tables

```{r}
#| label: table-1
barcoding_res_table
```

**Table 1** Results of barcode tests (frequency of DNA sequences that could be successfully identified to species) by test type and dataset.

## Figures

**Fig. 2.** Comparison of genetic (K2P) distances between *rbcL* and *trnL-F*, datasets including all taxa.
(**a**) maximum intraspecific distances.
(**b**) minimum interspecific distances.
Red dashed line shows 1:1 correspondence.
Each point is one species pair (interspecific distances) or pair of sequences within a species (intraspecific distances).

**Fig. 3.** Maximum-likelihood *rbcL* + *trnL-F* phylogeny overlaid with hybrid status and results of the DNA barcode tests from the *rbcL* + *trnL-F* dataset.
Colors of outermost ring indicate major fern clades (order or suborder) with sampling of more than one species in the dataset, letters next to rings are two-letter abbreviation of major clade.
Orange (innermost ring) indicates hybrid taxa and/or taxa belonging to species complexes.
Middle rings indicate bacode test results: blue indicates taxa (generally, species) that could be successfully identified; red indicates taxa that could not be successfully identified (failures).
Three barcode tests were used: the gap test, the tree (monophyly) test, and the BLAST test.
Any taxon with a specimen that failed at least one test is counted as a failure.
For the gap test and tree test, only species with multiple specimens were analyzed.
Tree visualization generated with the 'ggtree' R package [@yuGgtreePackageVisualization2017].
For details about each test, see Methods and Technical Validation.
